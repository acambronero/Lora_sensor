#ifndef __SX126x_H__
#define __SX126x_H__

#include "stdint.h"
#include <functional>
#include "radiodefinitions.h"
#define SX1261 1
#define SX1262 2

class SX126Handler;
class RadioHandler;


//#define RX_BUFFER_SIZE 256

/*!
 * ============================================================================
 * Public functions prototypes
 * ============================================================================
 */

class SX126xDriver {

public:
    /*!
     * \brief Initializes the radio driver
     */
    void Init(SX126Handler *sxHandler);

    /*!
     * \brief Gets the current Operation Mode of the Radio
     *
     * \retval      RadioOperatingModes_t last operating mode
     */
    RadioOperatingModes_t GetOperatingMode(void);

    /*!
     * \brief Sets/Updates the current Radio OperationMode variable.
     *
     * \remark WARNING: This function is only required to reflect the current radio
     *                  operating mode when processing interrupts.
     *
     * \param  mode           New operating mode
     */
    void SetOperatingMode(RadioOperatingModes_t mode);

    /*!
     * \brief Wakeup the radio if it is in Sleep mode and check that Busy is low
     */
    void CheckDeviceReady(SX126Handler *sxHandler);

    /*!
     * \brief Saves the payload to be send in the radio buffer
     *
     * \param   payload       A pointer to the payload
     * \param   size          The size of the payload
     */
    void SetPayload(uint8_t *payload, uint8_t size, SX126Handler *sxHandler);

    /*!
     * \brief Reads the payload received. If the received payload is longer
     * than maxSize, then the method returns 1 and do not set size and payload.
     *
     * \param  payload       A pointer to a buffer into which the payload will be copied
     * \param  size          A pointer to the size of the payload received
     * \param   maxSize       The maximal size allowed to copy into the buffer
     */
    uint8_t GetPayload(uint8_t *payload, uint8_t *size, uint8_t maxSize, uint8_t *dataReady, SX126Handler *sxHandler);

    /*!
     * \brief Sends a payload
     *
     * \param   payload       A pointer to the payload to send
     * \param   size          The size of the payload to send
     * \param   timeout       The timeout for Tx operation
     */
    void SendPayload(uint8_t *payload, uint8_t size, uint32_t timeout, SX126Handler *sxHandler);

    /*!
     * \brief Gets a 32 bits random value generated by the radio
     *
     * \remark The radio must be in reception mode before executing this function
     *
     * \retval randomValue    32 bits random value
     */
    uint32_t GetRandom(SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in sleep mode
     *
     * \param   sleepConfig   The sleep configuration describing data
     *                            retention and RTC wake-up
     */
    void SetSleep(SleepParams_t sleepConfig, SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in configuration mode
     *
     * \param   mode          The standby mode to put the radio into
     */
    void SetStandby(RadioStandbyModes_t mode, SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in FS mode
     */
    void SetFs(SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in transmission mode
     *
     * \param   timeout       Structure describing the transmission timeout value
     */
    void SetTx(uint32_t timeout, SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in reception mode
     *
     * \param   timeout       Structure describing the reception timeout value
     */
    void SetRx(uint32_t timeout, SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in reception mode with Boosted LNA gain
     *
     * \param   timeout       Structure describing the reception timeout value
     */
    void SetRxBoosted(uint32_t timeout, SX126Handler *sxHandler);

    /*!
     * \brief Sets the Rx duty cycle management parameters
     *
     * \param   rxTime        Structure describing reception timeout value
     * \param   sleepTime     Structure describing sleep timeout value
     */
    void SetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime, SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in CAD mode
     */
    void SetCad(SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in continuous wave transmission mode
     */
    void SetTxContinuousWave(SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio in continuous preamble transmission mode
     */
    void SetTxInfinitePreamble(SX126Handler *sxHandler);

    /*!
     * \brief Decide which interrupt will stop the internal radio rx timer.
     *
     * \param   enable          [0: Timer stop after header/syncword detection
     *                               1: Timer stop after preamble detection]
     */
    void SetStopRxTimerOnPreambleDetect(bool enable, SX126Handler *sxHandler);

    /*!
     * \brief Set the number of symbol the radio will wait to validate a reception
     *
     * \param   SymbNum          number of LoRa symbols
     */
    void SetLoRaSymbNumTimeout(uint8_t SymbNum, SX126Handler *sxHandler);

    /*!
     * \brief Sets the power regulators operating mode
     *
     * \param   mode          [0: LDO, 1:DC_DC]
     */
    void SetRegulatorMode(RadioRegulatorMode_t mode, SX126Handler *sxHandler);

    /*!
     * \brief Calibrates the given radio block
     *
     * \param   calibParam    The description of blocks to be calibrated
     */
    void Calibrate(CalibrationParams_t calibParam, SX126Handler *sxHandler);

    /*!
     * \brief Calibrates the Image rejection depending of the frequency
     *
     * \param   freq    The operating frequency
     */
    void CalibrateImage(uint32_t freq, SX126Handler *sxHandler);

    /*!
     * \brief Sets the transmission parameters
     *
     * \param   paDutyCycle     Duty Cycle for the PA
     * \param   hpMax          0 for sx1261, 7 for sx1262
     * \param   deviceSel       1 for sx1261, 0 for sx1262
     * \param   paLut           0 for 14dBm LUT, 1 for 22dBm LUT
     */
    void SetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut, SX126Handler *sxHandler);

    /*!
     * \brief Defines into which mode the chip goes after a TX / RX done
     *
     * \param   fallbackMode    The mode in which the radio goes
     */
    void SetRxTxFallbackMode(uint8_t fallbackMode, SX126Handler *sxHandler);

    /*!
     * \brief   Sets the IRQ mask and DIO masks
     *
     * \param   irqMask       General IRQ mask
     * \param   dio1Mask      DIO1 mask
     * \param   dio2Mask      DIO2 mask
     * \param   dio3Mask      DIO3 mask
     */
    void SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask, SX126Handler *sxHandler);

    /*!
     * \brief Returns the current IRQ status
     *
     * \retval      irqStatus     IRQ status
     */
    uint16_t GetIrqStatus(SX126Handler *sxHandler);

    /*!
     * \brief Sets the RF frequency
     *
     * \param   frequency     RF frequency [Hz]
     */
    void SetRfFrequency(uint32_t frequency, SX126Handler *sxHandler);

    /*!
     * \brief Sets the radio for the given protocol
     *
     * \param   packetType    [PACKET_TYPE_GFSK, PACKET_TYPE_LORA]
     *
     * \remark This method has to be called before SetRfFrequency,
     *         SetModulationParams and SetPacketParams
     */
    void SetPacketType(RadioPacketTypes_t packetType, SX126Handler *sxHandler);

    /*!
     * \brief Gets the current radio protocol
     *
     * \retval      packetType    [PACKET_TYPE_GFSK, PACKET_TYPE_LORA]
     */
    RadioPacketTypes_t GetPacketType(void);

    /*!
     * \brief Sets the transmission parameters
     *
     * \param   power         RF output power [-18..13] dBm
     * \param   rampTime      Transmission ramp up time
     */
    void SetTxParams(int8_t power, RadioRampTimes_t rampTime, SX126Handler *sxHandler);

    /*!
     * \brief Set the modulation parameters
     *
     * \param   modParams     A structure describing the modulation parameters
     */
    void SetModulationParams(ModulationParams_t *modParams, SX126Handler *sxHandler);

    /*!
     * \brief Sets the packet parameters
     *
     * \param   packetParams  A structure describing the packet parameters
     */
    void SetPacketParams(PacketParams_t *packetParams, SX126Handler *sxHandler);

    /*!
     * \brief Sets the Channel Activity Detection (CAD) parameters
     *
     * \param   cadSymbolNum   The number of symbol to use for CAD operations
     *                             [LORA_CAD_01_SYMBOL, LORA_CAD_02_SYMBOL,
     *                              LORA_CAD_04_SYMBOL, LORA_CAD_08_SYMBOL,
     *                              LORA_CAD_16_SYMBOL]
     * \param   cadDetPeak     Limit for detection of SNR peak used in the CAD
     * \param   cadDetMin      Set the minimum symbol recognition for CAD
     * \param   cadExitMode    Operation to be done at the end of CAD action
     *                             [LORA_CAD_ONLY, LORA_CAD_RX, LORA_CAD_LBT]
     * \param   cadTimeout     Defines the timeout value to abort the CAD activity
     */
    void SetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout, SX126Handler *sxHandler);

    /*!
     * \brief Sets the data buffer base address for transmission and reception
     *
     * \param   txBaseAddress Transmission base address
     * \param   rxBaseAddress Reception base address
     */
    void SetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress, SX126Handler *sxHandler);

    /*!
     * \brief Gets the current radio status
     *
     * \retval      status        Radio status
     */
    RadioStatus_t GetStatus(SX126Handler *sxHandler);

    /*!
     * \brief Returns the instantaneous RSSI value for the last packet received
     *
     * \retval      rssiInst      Instantaneous RSSI
     */
    int8_t GetRssiInst(SX126Handler *sxHandler);

    /*!
     * \brief Gets the last received packet buffer status
     *
     * \param  payloadLength Last received packet payload length
     * \param  rxStartBuffer Last received packet buffer address pointer
     */
    void GetRxBufferStatus(uint8_t *payloadLength, uint8_t *rxStartBuffer, SX126Handler *sxHandler);

    /*!
     * \brief Gets the last received packet payload length
     *
     * \param  pktStatus     A structure of packet status
     */
    void GetPacketStatus(PacketStatus_t *pktStatus, SX126Handler *sxHandler);

    /*!
     * \brief Returns the possible system errors
     *
     * \retval sysErrors Value representing the possible sys failures
     */
    RadioError_t GetDeviceErrors(SX126Handler *sxHandler);

    /*!
     * \brief Clear all the errors in the device
     */
    void ClearDeviceErrors(SX126Handler *sxHandler);

    /*!
     * \brief Clears the IRQs
     *
     * \param   irq           IRQ(s) to be cleared
     */
    void ClearIrqStatus(uint16_t irq, SX126Handler *sxHandler);
};



#endif // __SX126x_H__
